package subject.branch;

/**
 * 1. Операторы ветвления
 */
public class BranchUtils {

    /**
     * 1.1. Релизовать алгоритм, который возвращает число 1 в случае, если значение входного параметра
     *      больше нуля и -1 в противном случае.
     */
    public int sign(int value) {
        return 0;
    }

    /**
     * 1.2. Релизовать алгоритм, который возвращает число 1 в случае, если значение входного параметра
     *      лежит в интервале от 42 до 74 включительно и -1 в противном случае.
     */
    public int valueInInterval(int value) {
        return 0;
    }

    /**
     * 1.3. Релизовать алгоритм, который возвращает число 1 в случае, если значение параметра value
     *      лежит в интервале от a до b включительно, возвращает -1 если не лежит в интервале. Если значение a
     *      меньше чем b, то возвращает 0.
     */
    public int valueInInterval(int value, int a, int b) {
        return 0;
    }

    /**
     * 1.4. Релизовать алгоритм, который возвращает true в случае, если значение входного параметра является
     *      четным и false в противном случае. Значение value всегда положительно.
     */
    public boolean isEven(int value) {
        return true;
    }

    /**
     * 1.5. Релизовать алгоритм, который возвращает true в случае, если значение параметра a вдвое больше,
     *      чем значение параметра b, в противном случае - false. Значения a и b всегда положительны.
     */
    public boolean isTwiceBigger(int a, int b) {
        return true;
    }
}
